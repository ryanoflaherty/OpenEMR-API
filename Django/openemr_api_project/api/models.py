from __future__ import unicode_literals
from django.db import models

# Create your models here.
class HistoryData(models.Model):
    id = models.BigIntegerField(primary_key=True)
    date = models.DateTimeField(blank=True, null=True)
    pid = models.BigIntegerField(null=False, )
    tobacco = models.TextField(blank=True, null=True)
    relatives_diabetes = models.TextField(blank=True, null=True)
    relatives_high_blood_pressure = models.TextField(blank=True, null=True)
#    relatives_heart_problems = models.TextField(blank=True, null=True)
#    relatives_stroke = models.TextField(blank=True, null=True)
#    coffee = models.TextField(blank=True, null=True)
#    alcohol = models.TextField(blank=True, null=True)
#    sleep_patterns = models.TextField(blank=True, null=True)
#    exercise_patterns = models.TextField(blank=True, null=True)
#    seatbelt_use = models.TextField(blank=True, null=True)
#    counseling = models.TextField(blank=True, null=True)
#    hazardous_activities = models.TextField(blank=True, null=True)
#    recreational_drugs = models.TextField(blank=True, null=True)
#    last_breast_exam = models.CharField(max_length=255, blank=True, null=True)
#    last_mammogram = models.CharField(max_length=255, blank=True, null=True)
#    last_gynocological_exam = models.CharField(max_length=255, blank=True, null=True)
#    last_rectal_exam = models.CharField(max_length=255, blank=True, null=True)
#    last_prostate_exam = models.CharField(max_length=255, blank=True, null=True)
#    last_physical_exam = models.CharField(max_length=255, blank=True, null=True)
#    last_sigmoidoscopy_colonoscopy = models.CharField(max_length=255, blank=True, null=True)
#    last_ecg = models.CharField(max_length=255, blank=True, null=True)
#    last_cardiac_echo = models.CharField(max_length=255, blank=True, null=True)
#    last_retinal = models.CharField(max_length=255, blank=True, null=True)
#    last_fluvax = models.CharField(max_length=255, blank=True, null=True)
#    last_pneuvax = models.CharField(max_length=255, blank=True, null=True)
#    last_ldl = models.CharField(max_length=255, blank=True, null=True)
#    last_hemoglobin = models.CharField(max_length=255, blank=True, null=True)
#    last_psa = models.CharField(max_length=255, blank=True, null=True)
#    last_exam_results = models.CharField(max_length=255, blank=True, null=True)
#    history_mother = models.TextField(blank=True, null=True)
#    dc_mother = models.TextField(blank=True, null=True)
#    history_father = models.TextField(blank=True, null=True)
#    dc_father = models.TextField(blank=True, null=True)
#    history_siblings = models.TextField(blank=True, null=True)
#    dc_siblings = models.TextField(blank=True, null=True)
#    history_offspring = models.TextField(blank=True, null=True)
#    dc_offspring = models.TextField(blank=True, null=True)
#    history_spouse = models.TextField(blank=True, null=True)
#    dc_spouse = models.TextField(blank=True, null=True)
#    relatives_cancer = models.TextField(blank=True, null=True)
#    relatives_tuberculosis = models.TextField(blank=True, null=True)
#    relatives_epilepsy = models.TextField(blank=True, null=True)
#    relatives_mental_illness = models.TextField(blank=True, null=True)
#    relatives_suicide = models.TextField(blank=True, null=True)
#    cataract_surgery = models.DateTimeField(blank=True, null=True)
#    tonsillectomy = models.DateTimeField(blank=True, null=True)
#    cholecystestomy = models.DateTimeField(blank=True, null=True)
#    heart_surgery = models.DateTimeField(blank=True, null=True)
#    hysterectomy = models.DateTimeField(blank=True, null=True)
#    hernia_repair = models.DateTimeField(blank=True, null=True)
#    hip_replacement = models.DateTimeField(blank=True, null=True)
#    knee_replacement = models.DateTimeField(blank=True, null=True)
#    appendectomy = models.DateTimeField(blank=True, null=True)
#    name_1 = models.CharField(max_length=255, blank=True, null=True)
#    value_1 = models.CharField(max_length=255, blank=True, null=True)
#    name_2 = models.CharField(max_length=255, blank=True, null=True)
#    value_2 = models.CharField(max_length=255, blank=True, null=True)
#    additional_history = models.TextField(blank=True, null=True)
#    exams = models.TextField()
#    usertext11 = models.TextField()
#    usertext12 = models.CharField(max_length=255)
#    usertext13 = models.CharField(max_length=255)
#    usertext14 = models.CharField(max_length=255)
#    usertext15 = models.CharField(max_length=255)
#    usertext16 = models.CharField(max_length=255)
#    usertext17 = models.CharField(max_length=255)
#    usertext18 = models.CharField(max_length=255)
#    usertext19 = models.CharField(max_length=255)
#    usertext20 = models.CharField(max_length=255)
#    usertext21 = models.CharField(max_length=255)
#    usertext22 = models.CharField(max_length=255)
#    usertext23 = models.CharField(max_length=255)
#    usertext24 = models.CharField(max_length=255)
#    usertext25 = models.CharField(max_length=255)
#    usertext26 = models.CharField(max_length=255)
#    usertext27 = models.CharField(max_length=255)
#    usertext28 = models.CharField(max_length=255)
#    usertext29 = models.CharField(max_length=255)
#    usertext30 = models.CharField(max_length=255)
#    userdate11 = models.DateField(blank=True, null=True)
#    userdate12 = models.DateField(blank=True, null=True)
#    userdate13 = models.DateField(blank=True, null=True)
#    userdate14 = models.DateField(blank=True, null=True)
#    userdate15 = models.DateField(blank=True, null=True)
#    userarea11 = models.TextField()
#    userarea12 = models.TextField()

    def __unicode__(self):
        return str(self.pid)

    class Meta:
        managed = False
        db_table = 'history_data'

class InsuranceData(models.Model):
    id = models.BigIntegerField(primary_key=True)
    type = models.CharField(max_length=9, blank=True, null=True)
    provider = models.CharField(max_length=255, blank=True, null=True)
    plan_name = models.CharField(max_length=255, blank=True, null=True)
    policy_number = models.CharField(max_length=255, blank=True, null=True)
    group_number = models.CharField(max_length=255, blank=True, null=True)
    subscriber_lname = models.CharField(max_length=255, blank=True, null=True)
    subscriber_mname = models.CharField(max_length=255, blank=True, null=True)
    subscriber_fname = models.CharField(max_length=255, blank=True, null=True)
    subscriber_relationship = models.CharField(max_length=255, blank=True, null=True)
#    subscriber_ss = models.CharField(max_length=255, blank=True, null=True)
    subscriber_dob = models.DateField(db_column='subscriber_DOB', blank=True, null=True)  # Field name made lowercase.
    subscriber_street = models.CharField(max_length=255, blank=True, null=True)
    subscriber_postal_code = models.CharField(max_length=255, blank=True, null=True)
    subscriber_city = models.CharField(max_length=255, blank=True, null=True)
    subscriber_state = models.CharField(max_length=255, blank=True, null=True)
    subscriber_country = models.CharField(max_length=255, blank=True, null=True)
    subscriber_phone = models.CharField(max_length=255, blank=True, null=True)
    subscriber_employer = models.CharField(max_length=255, blank=True, null=True)
#    subscriber_employer_street = models.CharField(max_length=255, blank=True, null=True)
#    subscriber_employer_postal_code = models.CharField(max_length=255, blank=True, null=True)
#    subscriber_employer_state = models.CharField(max_length=255, blank=True, null=True)
#    subscriber_employer_country = models.CharField(max_length=255, blank=True, null=True)
#    subscriber_employer_city = models.CharField(max_length=255, blank=True, null=True)
#    copay = models.CharField(max_length=255, blank=True, null=True)
    date = models.DateField()
    pid = models.BigIntegerField(primary_key=True)
    subscriber_sex = models.CharField(max_length=25, blank=True, null=True)
#    accept_assignment = models.CharField(max_length=5)
#    policy_type = models.CharField(max_length=25)

    def __unicode__(self):
        return str(self.pid) + ', ' + self.type

    class Meta:
        managed = False
        db_table = 'insurance_data'
        unique_together = (('pid', 'type', 'date'),)

class PatientData(models.Model):
    pid = models.BigIntegerField(unique=True, primary_key=True)
    pubpid = models.CharField(max_length=255)
    date = models.DateTimeField(blank=True, null=True)
    fname = models.CharField(max_length=255)
    lname = models.CharField(max_length=255)
    mname = models.CharField(max_length=255)
    dob = models.DateField(db_column='DOB', blank=True, null=True)  # Field name made lowercase.
    sex = models.CharField(max_length=255)
    status = models.CharField(max_length=255)
    email = models.CharField(max_length=255)
    street = models.CharField(max_length=255)
    postal_code = models.CharField(max_length=255)
    city = models.CharField(max_length=255)
    state = models.CharField(max_length=255)
    country_code = models.CharField(max_length=255)
    phone_contact = models.CharField(max_length=255)
    phone_cell = models.CharField(max_length=255)
#    id = models.BigIntegerField(primary_key=True)
#    title = models.CharField(max_length=255)
#    language = models.CharField(max_length=255)
#    financial = models.CharField(max_length=255)
#    drivers_license = models.CharField(max_length=255)
    ss = models.CharField(max_length=255)
#    occupation = models.TextField(blank=True, null=True)
#    phone_home = models.CharField(max_length=255)
#    phone_biz = models.CharField(max_length=255)
#    pharmacy_id = models.IntegerField()
#    contact_relationship = models.CharField(max_length=255)
#    referrer = models.CharField(max_length=255)
#    referrerid = models.CharField(db_column='referrerID', max_length=255)  # Field name made lowercase.
#    providerid = models.IntegerField(db_column='providerID', blank=True, null=True)  # Field name made lowercase.
#    ref_providerid = models.IntegerField(db_column='ref_providerID', blank=True, null=True)  # Field name made lowercase.
#    ethnoracial = models.CharField(max_length=255)
#    race = models.CharField(max_length=255)
#    ethnicity = models.CharField(max_length=255)
#    interpretter = models.CharField(max_length=255)
#    migrantseasonal = models.CharField(max_length=255)
#    family_size = models.CharField(max_length=255)
#    monthly_income = models.CharField(max_length=255)
#    homeless = models.CharField(max_length=255)
#    financial_review = models.DateTimeField(blank=True, null=True)
#    email_direct = models.CharField(max_length=255)
#    genericname1 = models.CharField(max_length=255)
#    genericval1 = models.CharField(max_length=255)
#    genericname2 = models.CharField(max_length=255)
#    genericval2 = models.CharField(max_length=255)
#    hipaa_mail = models.CharField(max_length=3)
#    hipaa_voice = models.CharField(max_length=3)
#    hipaa_notice = models.CharField(max_length=3)
#    hipaa_message = models.CharField(max_length=20)
#    hipaa_allowsms = models.CharField(max_length=3)
#    hipaa_allowemail = models.CharField(max_length=3)
#    squad = models.CharField(max_length=32)
#    fitness = models.IntegerField()
#    referral_source = models.CharField(max_length=30)
#    usertext1 = models.CharField(max_length=255)
#    usertext2 = models.CharField(max_length=255)
#    usertext3 = models.CharField(max_length=255)
#    usertext4 = models.CharField(max_length=255)
#    usertext5 = models.CharField(max_length=255)
#    usertext6 = models.CharField(max_length=255)
#    usertext7 = models.CharField(max_length=255)
#    usertext8 = models.CharField(max_length=255)
#    userlist1 = models.CharField(max_length=255)
#    userlist2 = models.CharField(max_length=255)
#    userlist3 = models.CharField(max_length=255)
#    userlist4 = models.CharField(max_length=255)
#    userlist5 = models.CharField(max_length=255)
#    userlist6 = models.CharField(max_length=255)
#    userlist7 = models.CharField(max_length=255)
#    pricelevel = models.CharField(max_length=255)
#    regdate = models.DateField(blank=True, null=True)
#    contrastart = models.DateField(blank=True, null=True)
#    completed_ad = models.CharField(max_length=3)
#    ad_reviewed = models.DateField(blank=True, null=True)
#    vfc = models.CharField(max_length=255)
#    mothersname = models.CharField(max_length=255)
#    guardiansname = models.CharField(max_length=255)
#    allow_imm_reg_use = models.CharField(max_length=255)
#    allow_imm_info_share = models.CharField(max_length=255)
#    allow_health_info_ex = models.CharField(max_length=255)
#    allow_patient_portal = models.CharField(max_length=31)
#    deceased_date = models.DateTimeField(blank=True, null=True)
#    deceased_reason = models.CharField(max_length=255)
#    soap_import_status = models.IntegerField(blank=True, null=True)
#    cmsportal_login = models.CharField(max_length=60)

    def __unicode__(self):
         return str(self.pid) + ', ' + self.lname

    class Meta:
        managed = False
        db_table = 'patient_data'

class FormEncounter(models.Model):
    id = models.BigIntegerField(primary_key=True)
    pid = models.BigIntegerField(blank=True, null=True)
    date = models.DateTimeField(blank=True, null=True)
    facility = models.TextField(blank=True, null=True)
    facility_id = models.IntegerField()
    encounter = models.BigIntegerField(blank=True, null=True)
    provider_id = models.IntegerField(blank=True, null=True)
    supervisor_id = models.IntegerField(blank=True, null=True)
#    onset_date = models.DateTimeField(blank=True, null=True)
#    reason = models.TextField(blank=True, null=True)
#    sensitivity = models.CharField(max_length=30, blank=True, null=True)
#    billing_note = models.TextField(blank=True, null=True)
#    pc_catid = models.IntegerField()
#    last_level_billed = models.IntegerField()
#    last_level_closed = models.IntegerField()
#    last_stmt_date = models.DateField(blank=True, null=True)
#    stmt_count = models.IntegerField()
#    invoice_refno = models.CharField(max_length=31)
#    referral_source = models.CharField(max_length=31)
#    billing_facility = models.IntegerField()

    def __unicode__(self):
         return str(self.pid) + ', ' + str(self.encounter)

    class Meta:
        managed = False
        db_table = 'form_encounter'

class IssueEncounter(models.Model):
    # (ming) set primary_key to pid instead of the default autoincremented id
    pid = models.IntegerField(primary_key=True)
    list_id = models.IntegerField()
    encounter = models.IntegerField()
    resolved = models.IntegerField()

    def __unicode__(self):
        return str(self.pid) + ', ' + str(self.encounter) + ', ' + str(self.list_id)

    class Meta:
        managed = False
        db_table = 'issue_encounter'
        unique_together = (('pid', 'list_id', 'encounter'),)
        
class Forms(models.Model):
    id = models.BigIntegerField(primary_key=True)
    date = models.DateTimeField(blank=True, null=True)
    encounter = models.BigIntegerField(blank=True, null=True)
    form_name = models.TextField(blank=True, null=True)
    form_id = models.BigIntegerField(blank=True, null=True)
    pid = models.BigIntegerField(blank=True, null=True)
    user = models.CharField(max_length=255, blank=True, null=True)
    authorized = models.IntegerField(blank=True, null=True)
    deleted = models.IntegerField()
#    formdir = models.TextField(blank=True, null=True)
#    groupname = models.CharField(max_length=255, blank=True, null=True)

    def __unicode__(self):
         return str(self.pid) + ', ' + str(self.encounter) + ', ' + self.form_name

    class Meta:
        managed = False
        db_table = 'forms'

class Lists(models.Model):
    id = models.BigIntegerField(primary_key=True)
    pid = models.BigIntegerField(blank=True, null=True)
    user = models.CharField(max_length=255, blank=True, null=True)
    date = models.DateTimeField(blank=True, null=True)
    type = models.CharField(max_length=255, blank=True, null=True)
    title = models.CharField(max_length=255, blank=True, null=True)
    begdate = models.DateField(blank=True, null=True)
    enddate = models.DateField(blank=True, null=True)
#    returndate = models.DateField(blank=True, null=True)
#    diagnosis = models.CharField(max_length=255, blank=True, null=True)
#    comments = models.TextField(blank=True, null=True)
#    groupname = models.CharField(max_length=255, blank=True, null=True)
#    outcome = models.IntegerField()
#    modifydate = models.DateTimeField()
#    occurrence = models.IntegerField(blank=True, null=True)
#    classification = models.IntegerField(blank=True, null=True)
#    referredby = models.CharField(max_length=255, blank=True, null=True)
#    extrainfo = models.CharField(max_length=255, blank=True, null=True)
#    activity = models.IntegerField(blank=True, null=True)
#    destination = models.CharField(max_length=255, blank=True, null=True)
#    reinjury_id = models.BigIntegerField()
#    injury_part = models.CharField(max_length=31)
#    injury_type = models.CharField(max_length=31)
#    injury_grade = models.CharField(max_length=31)
#    reaction = models.CharField(max_length=255)
#    external_allergyid = models.IntegerField(blank=True, null=True)
#    erx_source = models.CharField(max_length=1)
#    erx_uploaded = models.CharField(max_length=1)

    def __unicode__(self):
         return str(self.pid) + ', ' + self.user + ', ' + self.type

    class Meta:
        managed = False
        db_table = 'lists'

class ListsTouch(models.Model):
    # (ming) set primary_key to pid instead of the default autoincremented id
   pid = models.BigIntegerField(primary_key=True)
   type = models.CharField(max_length=255)
   date = models.DateTimeField(blank=True, null=True)

   def __unicode__(self):
       return str(self.pid) + ', ' + self.type

   class Meta:
       managed = False
       db_table = 'lists_touch'
       unique_together = (('pid', 'type'),)

class Facility(models.Model):
    id = models.BigIntegerField(primary_key=True)
    name = models.CharField(max_length=255, blank=True, null=True)
    phone = models.CharField(max_length=30, blank=True, null=True)
    fax = models.CharField(max_length=30, blank=True, null=True)
    email = models.CharField(max_length=255, blank=True, null=True)
    street = models.CharField(max_length=255, blank=True, null=True)
    city = models.CharField(max_length=255, blank=True, null=True)
    state = models.CharField(max_length=50, blank=True, null=True)
    country_code = models.CharField(max_length=10, blank=True, null=True)
    facility_npi = models.CharField(max_length=15, blank=True, null=True)
    service_location = models.IntegerField()
    billing_location = models.IntegerField()
    color = models.CharField(max_length=7)
#    postal_code = models.CharField(max_length=11, blank=True, null=True)
#    federal_ein = models.CharField(max_length=15, blank=True, null=True)
#    website = models.CharField(max_length=255, blank=True, null=True)
#    accepts_assignment = models.IntegerField()
#    pos_code = models.IntegerField(blank=True, null=True)
#    x12_sender_id = models.CharField(max_length=25, blank=True, null=True)
#    attn = models.CharField(max_length=65, blank=True, null=True)
#    domain_identifier = models.CharField(max_length=60, blank=True, null=True)
#    tax_id_type = models.CharField(max_length=31)
#    primary_business_entity = models.IntegerField()

    def __unicode__(self):
       return str(self.id) + ', ' + self.name

    class Meta:
        managed = False
        db_table = 'facility'

class FormVitals(models.Model):
    id = models.BigIntegerField(primary_key=True)
    date = models.DateTimeField(blank=True, null=True)
    pid = models.BigIntegerField(blank=True, null=True)
    user = models.CharField(max_length=255, blank=True, null=True)
    groupname = models.CharField(max_length=255, blank=True, null=True)
    authorized = models.IntegerField(blank=True, null=True)
    pulse = models.FloatField(blank=True, null=True)
    bps = models.CharField(max_length=40, blank=True, null=True)
    bpd = models.CharField(max_length=40, blank=True, null=True)
    weight = models.FloatField(blank=True, null=True)
    height = models.FloatField(blank=True, null=True)
    bmi = models.FloatField(db_column='BMI', blank=True, null=True)  # Field name made lowercase.
    waist_circ = models.FloatField(blank=True, null=True)
    activity = models.IntegerField(blank=True, null=True)
    temperature = models.FloatField(blank=True, null=True)
#    temp_method = models.CharField(max_length=255, blank=True, null=True)
#    respiration = models.FloatField(blank=True, null=True)
#    note = models.CharField(max_length=255, blank=True, null=True)
#    bmi_status = models.CharField(db_column='BMI_status', max_length=255, blank=True, null=True)  # Field name made lowercase.
#    head_circ = models.FloatField(blank=True, null=True)
#    oxygen_saturation = models.FloatField(blank=True, null=True)

    def __unicode__(self):
       return str(self.pid)

    class Meta:
        managed = False
        db_table = 'form_vitals'

class FormReviewofs(models.Model):
    id = models.BigIntegerField(primary_key=True)
    date = models.DateTimeField(blank=True, null=True)
    pid = models.BigIntegerField(blank=True, null=True)
    user = models.CharField(max_length=255, blank=True, null=True)
    groupname = models.CharField(max_length=255, blank=True, null=True)
    authorized = models.IntegerField(blank=True, null=True)
    dry_mouth = models.CharField(max_length=5, blank=True, null=True)
    heart_attack = models.CharField(max_length=5, blank=True, null=True)
    high_blood_pressure = models.CharField(max_length=5, blank=True, null=True)
    insulin_dependent_diabetes = models.CharField(max_length=5, blank=True, null=True)
    noninsulin_dependent_diabetes = models.CharField(max_length=5, blank=True, null=True)
#    activity = models.integerfield(blank=true, null=true)
#    fever = models.charfield(max_length=5, blank=true, null=true)
#    chills = models.charfield(max_length=5, blank=true, null=true)
#    night_sweats = models.charfield(max_length=5, blank=true, null=true)
#    weight_loss = models.charfield(max_length=5, blank=true, null=true)
#    poor_appetite = models.charfield(max_length=5, blank=true, null=true)
#    insomnia = models.charfield(max_length=5, blank=true, null=true)
#    fatigued = models.charfield(max_length=5, blank=true, null=true)
#    depressed = models.charfield(max_length=5, blank=true, null=true)
#    hyperactive = models.charfield(max_length=5, blank=true, null=true)
#    exposure_to_foreign_countries = models.charfield(max_length=5, blank=true, null=true)
#    cataracts = models.charfield(max_length=5, blank=true, null=true)
#    cataract_surgery = models.charfield(max_length=5, blank=true, null=true)
#    glaucoma = models.charfield(max_length=5, blank=true, null=true)
#    double_vision = models.charfield(max_length=5, blank=true, null=true)
#    blurred_vision = models.charfield(max_length=5, blank=true, null=true)
#    poor_hearing = models.charfield(max_length=5, blank=true, null=true)
#    headaches = models.charfield(max_length=5, blank=true, null=true)
#    ringing_in_ears = models.charfield(max_length=5, blank=true, null=true)
#    bloody_nose = models.charfield(max_length=5, blank=true, null=true)
#    sinusitis = models.charfield(max_length=5, blank=true, null=true)
#    sinus_surgery = models.charfield(max_length=5, blank=true, null=true)
#    strep_throat = models.charfield(max_length=5, blank=true, null=true)
#    tonsillectomy = models.charfield(max_length=5, blank=true, null=true)
#    swollen_lymph_nodes = models.charfield(max_length=5, blank=true, null=true)
#    throat_cancer = models.charfield(max_length=5, blank=true, null=true)
#    throat_cancer_surgery = models.charfield(max_length=5, blank=true, null=true)
#    irregular_heart_beat = models.charfield(max_length=5, blank=true, null=true)
#    chest_pains = models.charfield(max_length=5, blank=true, null=true)
#    shortness_of_breath = models.charfield(max_length=5, blank=true, null=true)
#    heart_failure = models.charfield(max_length=5, blank=true, null=true)
#    poor_circulation = models.charfield(max_length=5, blank=true, null=true)
#    vascular_surgery = models.charfield(max_length=5, blank=true, null=true)
#    cardiac_catheterization = models.charfield(max_length=5, blank=true, null=true)
#    coronary_artery_bypass = models.charfield(max_length=5, blank=true, null=true)
#    heart_transplant = models.charfield(max_length=5, blank=true, null=true)
#    stress_test = models.charfield(max_length=5, blank=true, null=true)
#    emphysema = models.charfield(max_length=5, blank=true, null=true)
#    chronic_bronchitis = models.charfield(max_length=5, blank=true, null=true)
#    interstitial_lung_disease = models.charfield(max_length=5, blank=true, null=true)
#    shortness_of_breath_2 = models.CharField(max_length=5, blank=True, null=True)
#    lung_cancer = models.CharField(max_length=5, blank=True, null=True)
#    lung_cancer_surgery = models.CharField(max_length=5, blank=True, null=True)
#    pheumothorax = models.CharField(max_length=5, blank=True, null=True)
#    stomach_pains = models.CharField(max_length=5, blank=True, null=True)
#    peptic_ulcer_disease = models.CharField(max_length=5, blank=True, null=True)
#    gastritis = models.CharField(max_length=5, blank=True, null=True)
#    endoscopy = models.CharField(max_length=5, blank=True, null=True)
#    polyps = models.CharField(max_length=5, blank=True, null=True)
#    colonoscopy = models.CharField(max_length=5, blank=True, null=True)
#    colon_cancer = models.CharField(max_length=5, blank=True, null=True)
#    colon_cancer_surgery = models.CharField(max_length=5, blank=True, null=True)
#    ulcerative_colitis = models.CharField(max_length=5, blank=True, null=True)
#    crohns_disease = models.CharField(max_length=5, blank=True, null=True)
#    appendectomy = models.CharField(max_length=5, blank=True, null=True)
#    divirticulitis = models.CharField(max_length=5, blank=True, null=True)
#    divirticulitis_surgery = models.CharField(max_length=5, blank=True, null=True)
#    gall_stones = models.CharField(max_length=5, blank=True, null=True)
#    cholecystectomy = models.CharField(max_length=5, blank=True, null=True)
#    hepatitis = models.CharField(max_length=5, blank=True, null=True)
#    cirrhosis_of_the_liver = models.CharField(max_length=5, blank=True, null=True)
#    splenectomy = models.CharField(max_length=5, blank=True, null=True)
#    kidney_failure = models.CharField(max_length=5, blank=True, null=True)
#    kidney_stones = models.CharField(max_length=5, blank=True, null=True)
#    kidney_cancer = models.CharField(max_length=5, blank=True, null=True)
#    kidney_infections = models.CharField(max_length=5, blank=True, null=True)
#    bladder_infections = models.CharField(max_length=5, blank=True, null=True)
#    bladder_cancer = models.CharField(max_length=5, blank=True, null=True)
#    prostate_problems = models.CharField(max_length=5, blank=True, null=True)
#    prostate_cancer = models.CharField(max_length=5, blank=True, null=True)
#    kidney_transplant = models.CharField(max_length=5, blank=True, null=True)
#    sexually_transmitted_disease = models.CharField(max_length=5, blank=True, null=True)
#    burning_with_urination = models.CharField(max_length=5, blank=True, null=True)
#    discharge_from_urethra = models.CharField(max_length=5, blank=True, null=True)
#    rashes = models.CharField(max_length=5, blank=True, null=True)
#    infections = models.CharField(max_length=5, blank=True, null=True)
#    ulcerations = models.CharField(max_length=5, blank=True, null=True)
#    pemphigus = models.CharField(max_length=5, blank=True, null=True)
#    herpes = models.CharField(max_length=5, blank=True, null=True)
#    osetoarthritis = models.CharField(max_length=5, blank=True, null=True)
#    rheumotoid_arthritis = models.CharField(max_length=5, blank=True, null=True)
#    lupus = models.CharField(max_length=5, blank=True, null=True)
#    ankylosing_sondlilitis = models.CharField(max_length=5, blank=True, null=True)
#    swollen_joints = models.CharField(max_length=5, blank=True, null=True)
#    stiff_joints = models.CharField(max_length=5, blank=True, null=True)
#    broken_bones = models.CharField(max_length=5, blank=True, null=True)
#    neck_problems = models.CharField(max_length=5, blank=True, null=True)
#    back_problems = models.CharField(max_length=5, blank=True, null=True)
#    back_surgery = models.CharField(max_length=5, blank=True, null=True)
#    scoliosis = models.CharField(max_length=5, blank=True, null=True)
#    herniated_disc = models.CharField(max_length=5, blank=True, null=True)
#    shoulder_problems = models.CharField(max_length=5, blank=True, null=True)
#    elbow_problems = models.CharField(max_length=5, blank=True, null=True)
#    wrist_problems = models.CharField(max_length=5, blank=True, null=True)
#    hand_problems = models.CharField(max_length=5, blank=True, null=True)
#    hip_problems = models.CharField(max_length=5, blank=True, null=True)
#    knee_problems = models.CharField(max_length=5, blank=True, null=True)
#    ankle_problems = models.CharField(max_length=5, blank=True, null=True)
#    foot_problems = models.CharField(max_length=5, blank=True, null=True)
#    hypothyroidism = models.CharField(max_length=5, blank=True, null=True)
#    hyperthyroidism = models.CharField(max_length=5, blank=True, null=True)
#    cushing_syndrom = models.CharField(max_length=5, blank=True, null=True)
#    addison_syndrom = models.CharField(max_length=5, blank=True, null=True)
#    additional_notes = models.TextField(blank=True, null=True)

    def __unicode__(self):
       return str(self.pid) + ', ' + str(self.date)

    class Meta:
        managed = False
        db_table = 'form_reviewofs'


class FormRos(models.Model):
    pid = models.IntegerField()
    date = models.DateTimeField(blank=True, null=True)
    heart_problem = models.CharField(max_length=3, blank=True, null=True)
    p = models.CharField(max_length=3, blank=True, null=True)
    n_numbness = models.CharField(max_length=3, blank=True, null=True)
    n_weakness = models.CharField(max_length=3, blank=True, null=True)
    diabetes = models.CharField(max_length=3, blank=True, null=True)
#    activity = models.IntegerField()
#    weight_change = models.CharField(max_length=3, blank=True, null=True)
#    weakness = models.CharField(max_length=3, blank=True, null=True)
#    fatigue = models.CharField(max_length=3, blank=True, null=True)
#    anorexia = models.CharField(max_length=3, blank=True, null=True)
#    fever = models.CharField(max_length=3, blank=True, null=True)
#    chills = models.CharField(max_length=3, blank=True, null=True)
#    night_sweats = models.CharField(max_length=3, blank=True, null=True)
#    insomnia = models.CharField(max_length=3, blank=True, null=True)
#    irritability = models.CharField(max_length=3, blank=True, null=True)
#    heat_or_cold = models.CharField(max_length=3, blank=True, null=True)
#    intolerance = models.CharField(max_length=3, blank=True, null=True)
#    change_in_vision = models.CharField(max_length=3, blank=True, null=True)
#    glaucoma_history = models.CharField(max_length=3, blank=True, null=True)
#    eye_pain = models.CharField(max_length=3, blank=True, null=True)
#    irritation = models.CharField(max_length=3, blank=True, null=True)
#    redness = models.CharField(max_length=3, blank=True, null=True)
#    excessive_tearing = models.CharField(max_length=3, blank=True, null=True)
#    double_vision = models.CharField(max_length=3, blank=True, null=True)
#    blind_spots = models.CharField(max_length=3, blank=True, null=True)
#    photophobia = models.CharField(max_length=3, blank=True, null=True)
#    hearing_loss = models.CharField(max_length=3, blank=True, null=True)
#    discharge = models.CharField(max_length=3, blank=True, null=True)
#    pain = models.CharField(max_length=3, blank=True, null=True)
#    vertigo = models.CharField(max_length=3, blank=True, null=True)
#    tinnitus = models.CharField(max_length=3, blank=True, null=True)
#    frequent_colds = models.CharField(max_length=3, blank=True, null=True)
#    sore_throat = models.CharField(max_length=3, blank=True, null=True)
#    sinus_problems = models.CharField(max_length=3, blank=True, null=True)
#    post_nasal_drip = models.CharField(max_length=3, blank=True, null=True)
#    nosebleed = models.CharField(max_length=3, blank=True, null=True)
#    snoring = models.CharField(max_length=3, blank=True, null=True)
#    apnea = models.CharField(max_length=3, blank=True, null=True)
#    breast_mass = models.CharField(max_length=3, blank=True, null=True)
#    breast_discharge = models.CharField(max_length=3, blank=True, null=True)
#    biopsy = models.CharField(max_length=3, blank=True, null=True)
#    abnormal_mammogram = models.CharField(max_length=3, blank=True, null=True)
#    cough = models.CharField(max_length=3, blank=True, null=True)
#    sputum = models.CharField(max_length=3, blank=True, null=True)
#    shortness_of_breath = models.CharField(max_length=3, blank=True, null=True)
#    wheezing = models.CharField(max_length=3, blank=True, null=True)
#    hemoptsyis = models.CharField(max_length=3, blank=True, null=True)
#    asthma = models.CharField(max_length=3, blank=True, null=True)
#    copd = models.CharField(max_length=3, blank=True, null=True)
#    chest_pain = models.CharField(max_length=3, blank=True, null=True)
#    palpitation = models.CharField(max_length=3, blank=True, null=True)
#    syncope = models.CharField(max_length=3, blank=True, null=True)
#    pnd = models.CharField(max_length=3, blank=True, null=True)
#    doe = models.CharField(max_length=3, blank=True, null=True)
#    orthopnea = models.CharField(max_length=3, blank=True, null=True)
#    peripheal = models.CharField(max_length=3, blank=True, null=True)
#    edema = models.CharField(max_length=3, blank=True, null=True)
#    legpain_cramping = models.CharField(max_length=3, blank=True, null=True)
#    history_murmur = models.CharField(max_length=3, blank=True, null=True)
#    arrythmia = models.CharField(max_length=3, blank=True, null=True)
#    dysphagia = models.CharField(max_length=3, blank=True, null=True)
#    heartburn = models.CharField(max_length=3, blank=True, null=True)
#    bloating = models.CharField(max_length=3, blank=True, null=True)
#    belching = models.CharField(max_length=3, blank=True, null=True)
#    flatulence = models.CharField(max_length=3, blank=True, null=True)
#    nausea = models.CharField(max_length=3, blank=True, null=True)
#    vomiting = models.CharField(max_length=3, blank=True, null=True)
#    hematemesis = models.CharField(max_length=3, blank=True, null=True)
#    gastro_pain = models.CharField(max_length=3, blank=True, null=True)
#    food_intolerance = models.CharField(max_length=3, blank=True, null=True)
#    hepatitis = models.CharField(max_length=3, blank=True, null=True)
#    jaundice = models.CharField(max_length=3, blank=True, null=True)
#    hematochezia = models.CharField(max_length=3, blank=True, null=True)
#    changed_bowel = models.CharField(max_length=3, blank=True, null=True)
#    diarrhea = models.CharField(max_length=3, blank=True, null=True)
#    constipation = models.CharField(max_length=3, blank=True, null=True)
#    polyuria = models.CharField(max_length=3, blank=True, null=True)
#    polydypsia = models.CharField(max_length=3, blank=True, null=True)
#    dysuria = models.CharField(max_length=3, blank=True, null=True)
#    hematuria = models.CharField(max_length=3, blank=True, null=True)
#    frequency = models.CharField(max_length=3, blank=True, null=True)
#    urgency = models.CharField(max_length=3, blank=True, null=True)
#    incontinence = models.CharField(max_length=3, blank=True, null=True)
#    renal_stones = models.CharField(max_length=3, blank=True, null=True)
#    utis = models.CharField(max_length=3, blank=True, null=True)
#    hesitancy = models.CharField(max_length=3, blank=True, null=True)
#    dribbling = models.CharField(max_length=3, blank=True, null=True)
#    stream = models.CharField(max_length=3, blank=True, null=True)
#    nocturia = models.CharField(max_length=3, blank=True, null=True)
#    erections = models.CharField(max_length=3, blank=True, null=True)
#    ejaculations = models.CharField(max_length=3, blank=True, null=True)
#    g = models.CharField(max_length=3, blank=True, null=True)
#    ap = models.CharField(max_length=3, blank=True, null=True)
#    lc = models.CharField(max_length=3, blank=True, null=True)
#    mearche = models.CharField(max_length=3, blank=True, null=True)
#    menopause = models.CharField(max_length=3, blank=True, null=True)
#    lmp = models.CharField(max_length=3, blank=True, null=True)
#    f_frequency = models.CharField(max_length=3, blank=True, null=True)
#    f_flow = models.CharField(max_length=3, blank=True, null=True)
#    f_symptoms = models.CharField(max_length=3, blank=True, null=True)
#    abnormal_hair_growth = models.CharField(max_length=3, blank=True, null=True)
#    f_hirsutism = models.CharField(max_length=3, blank=True, null=True)
#    joint_pain = models.CharField(max_length=3, blank=True, null=True)
#    swelling = models.CharField(max_length=3, blank=True, null=True)
#    m_redness = models.CharField(max_length=3, blank=True, null=True)
#    m_warm = models.CharField(max_length=3, blank=True, null=True)
#    m_stiffness = models.CharField(max_length=3, blank=True, null=True)
#    muscle = models.CharField(max_length=3, blank=True, null=True)
#    m_aches = models.CharField(max_length=3, blank=True, null=True)
#    fms = models.CharField(max_length=3, blank=True, null=True)
#    arthritis = models.CharField(max_length=3, blank=True, null=True)
#    loc = models.CharField(max_length=3, blank=True, null=True)
#    seizures = models.CharField(max_length=3, blank=True, null=True)
#    stroke = models.CharField(max_length=3, blank=True, null=True)
#    tia = models.CharField(max_length=3, blank=True, null=True)
#    paralysis = models.CharField(max_length=3, blank=True, null=True)
#    intellectual_decline = models.CharField(max_length=3, blank=True, null=True)
#    memory_problems = models.CharField(max_length=3, blank=True, null=True)
#    dementia = models.CharField(max_length=3, blank=True, null=True)
#    n_headache = models.CharField(max_length=3, blank=True, null=True)
#    s_cancer = models.CharField(max_length=3, blank=True, null=True)
#    psoriasis = models.CharField(max_length=3, blank=True, null=True)
#    s_acne = models.CharField(max_length=3, blank=True, null=True)
#    s_other = models.CharField(max_length=3, blank=True, null=True)
#    s_disease = models.CharField(max_length=3, blank=True, null=True)
#    p_diagnosis = models.CharField(max_length=3, blank=True, null=True)
#    p_medication = models.CharField(max_length=3, blank=True, null=True)
#    depression = models.CharField(max_length=3, blank=True, null=True)
#    anxiety = models.CharField(max_length=3, blank=True, null=True)
#    social_difficulties = models.CharField(max_length=3, blank=True, null=True)
#    thyroid_problems = models.CharField(max_length=3, blank=True, null=True)
#    abnormal_blood = models.CharField(max_length=3, blank=True, null=True)
#    anemia = models.CharField(max_length=3, blank=True, null=True)
#    fh_blood_problems = models.CharField(max_length=3, blank=True, null=True)
#    bleeding_problems = models.CharField(max_length=3, blank=True, null=True)
#    allergies = models.CharField(max_length=3, blank=True, null=True)
#    frequent_illness = models.CharField(max_length=3, blank=True, null=True)
#    hiv = models.CharField(max_length=3, blank=True, null=True)
#    hai_status = models.CharField(max_length=3, blank=True, null=True)

    def __unicode__(self):
       return str(self.pid) + ', ' + str(self.date)

    class Meta:
        managed = False
        db_table = 'form_ros'
